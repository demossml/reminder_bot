from bd.model import Session, Chat, Post
from .util import format_reminder

from arrow import utcnow, get
import sys

import logging

logger = logging.getLogger(__name__)


name = "‚ú® Reminder ‚û°Ô∏è".upper()
desc = ""
mime = "text"


class ReminderMenuInput:
    """
    –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "add_reminder", "name": "‚ûï –î–û–ë–ê–í–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ‚û°Ô∏è"},
            {"id": "edit_reminder", "name": "‚úèÔ∏è üëÅÔ∏è –ü–†–û–°–ú–û–¢–†–ï–¢–¨/‚úèÔ∏è –ò–ó–ú–ï–ù–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ‚û°Ô∏è"},
            # {"id": "view_reminders", "name": "üëÅÔ∏è –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ‚û°Ô∏è"},
        ]

        return output


class ReminderActionMenuInput:
    """
    –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "view_reminder", "name": "üëÅÔ∏è –ü–†–û–°–ú–û–¢–†–ï–¢–¨ ‚û°Ô∏è"},
            {"id": "change_reminder", "name": "‚úèÔ∏è –ò–ó–ú–ï–ù–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ‚û°Ô∏è"},
            {"id": "delete_reminders", "name": "‚ùå –£–î–ê–õ–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ‚û°Ô∏è"},
        ]

        return output


class ChangeAReminderInput:
    """
    –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "change_period", "name": "üìÖ –ò–ó–ú–ï–ù–ò–¢–¨ –ü–ï–†–ò–û–î ‚û°Ô∏è"},
            {"id": "change_reminder", "name": "‚úèÔ∏è –ò–ó–ú–ï–ù–ò–¢–¨ –¢–ï–ö–°–¢ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ‚û°Ô∏è"},
        ]

        return output


class GetChatInput:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è  –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = []

        data_chats = Chat.objects(user_id=session.user_id).first()

        if data_chats:

            for item in Chat.objects(user_id=session.user_id, status_type="active"):

                name = item["chat_title"]
                output.append({"id": item["chat_id"], "name": f"{name} ‚û°Ô∏è"})

        return output


class NameReminderInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚úçÔ∏è".upper()
    type = "MESSAGE"


class TextInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚úçÔ∏è".upper()
    type = "MESSAGE"


class PeriodInput:
    name = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üìÖ".upper()
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        return [
            {"id": "one_time", "name": "üïí –û–î–ò–ù –†–ê–ó ‚û°Ô∏è"},
            {"id": "daily", "name": "üìÖ –ï–ñ–ï–î–ù–ï–í–ù–û ‚û°Ô∏è"},
            {"id": "weekly", "name": "üìÖ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û ‚û°Ô∏è"},
            {"id": "monthly", "name": "üìÖ –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û ‚û°Ô∏è"},
            {"id": "yearly", "name": "üìÖ –ï–ñ–ï–ì–û–î–ù–û ‚û°Ô∏è"},
        ]


class MonthInput:
    """
    –ó–∞–ø—Ä–æ—Å –º–µ—Å—è—Ü–∞
    """

    name = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü üìÖ".upper()
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞.
        """
        return [
            {"id": "jan", "name": "–Ø–ù–í–ê–†–¨ ‚û°Ô∏è"},
            {"id": "feb", "name": "–§–ï–í–†–ê–õ–¨ ‚û°Ô∏è"},
            {"id": "mar", "name": "–ú–ê–†–¢ ‚û°Ô∏è"},
            {"id": "apr", "name": "–ê–ü–†–ï–õ–¨ ‚û°Ô∏è"},
            {"id": "may", "name": "–ú–ê–ô ‚û°Ô∏è"},
            {"id": "jun", "name": "–ò–Æ–ù–¨ ‚û°Ô∏è"},
            {"id": "jul", "name": "–ò–Æ–õ–¨ ‚û°Ô∏è"},
            {"id": "aug", "name": "–ê–í–ì–£–°–¢ ‚û°Ô∏è"},
            {"id": "sep", "name": "–°–ï–ù–¢–Ø–ë–†–¨ ‚û°Ô∏è"},
            {"id": "oct", "name": "–û–ö–¢–Ø–ë–†–¨ ‚û°Ô∏è"},
            {"id": "nov", "name": "–ù–û–Ø–ë–†–¨ ‚û°Ô∏è"},
            {"id": "dec", "name": "–î–ï–ö–ê–ë–†–¨ ‚û°Ô∏è"},
        ]


class DayOfMonthInput:
    """
    –ó–∞–ø—Ä–æ—Å —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
    """

    name = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ üìÖ".upper()
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î(00) ‚úçÔ∏è".upper()
    type = "MESSAGE"


class WeekDayInput:
    """
    –ó–∞–ø—Ä–æ—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    """

    name = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üìÖ".upper()
    desc = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üìÖ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        return [
            {"id": "mon", "name": "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö ‚û°Ô∏è"},
            {"id": "tue", "name": "–í–¢–û–†–ù–ò–ö ‚û°Ô∏è"},
            {"id": "wed", "name": "–°–†–ï–î–ê ‚û°Ô∏è"},
            {"id": "thu", "name": "–ß–ï–¢–í–ï–†–ì ‚û°Ô∏è"},
            {"id": "fri", "name": "–ü–Ø–¢–ù–ò–¶–ê ‚û°Ô∏è"},
            {"id": "sat", "name": "–°–£–ë–ë–û–¢–ê ‚û°Ô∏è"},
            {"id": "sun", "name": "–í–û–°–ö–†–ï–°–ï–ù–¨–ï ‚û°Ô∏è"},
        ]


class TimeZoneInput:
    """
    –ó–∞–ø—Ä–æ—Å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    """

    name = "–í–´–ë–ï–†–ò–¢–ï –ß–ê–°–û–í–û–ô –ü–û–Ø–° üïí".upper()
    desc = "–í–´–ë–ï–†–ò–¢–ï –ß–ê–°–û–í–û–ô –ü–û–Ø–° üïí".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        return [
            {"id": "-12", "name": "UTC-12 ‚û°Ô∏è"},
            {"id": "-11", "name": "UTC-11 ‚û°Ô∏è"},
            {"id": "-10", "name": "UTC-10 ‚û°Ô∏è"},
            {"id": "-09", "name": "UTC-09 ‚û°Ô∏è"},
            {"id": "-08", "name": "UTC-08 ‚û°Ô∏è"},
            {"id": "-07", "name": "UTC-07 ‚û°Ô∏è"},
            {"id": "-06", "name": "UTC-06 ‚û°Ô∏è"},
            {"id": "-05", "name": "UTC-05 ‚û°Ô∏è"},
            {"id": "-04", "name": "UTC-04 ‚û°Ô∏è"},
            {"id": "-03", "name": "UTC-03 ‚û°Ô∏è"},
            {"id": "-02", "name": "UTC-02 ‚û°Ô∏è"},
            {"id": "-01", "name": "UTC-01 ‚û°Ô∏è"},
            {"id": "+00", "name": "UTC+00 ‚û°Ô∏è"},
            {"id": "+01", "name": "UTC+01 ‚û°Ô∏è"},
            {"id": "+02", "name": "UTC+02 ‚û°Ô∏è"},
            {"id": "+03", "name": "UTC+03 ‚û°Ô∏è"},
            {"id": "+04", "name": "UTC+04 ‚û°Ô∏è"},
            {"id": "+05", "name": "UTC+05 ‚û°Ô∏è"},
            {"id": "+06", "name": "UTC+06 ‚û°Ô∏è"},
            {"id": "+07", "name": "UTC+07 ‚û°Ô∏è"},
            {"id": "+08", "name": "UTC+08 ‚û°Ô∏è"},
            {"id": "+09", "name": "UTC+09 ‚û°Ô∏è"},
            {"id": "+10", "name": "UTC+10 ‚û°Ô∏è"},
            {"id": "+11", "name": "UTC+11 ‚û°Ô∏è"},
            {"id": "+12", "name": "UTC+12 ‚û°Ô∏è"},
        ]


class TimeInput:
    """
    –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
    """

    name = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è üïí".upper()
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM(00:00) ‚úçÔ∏è".upper()
    type = "MESSAGE"


class GetPostInput:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = []

        data_chats = Post.objects(user_id=session.user_id).first()

        if data_chats:
            for item in Post.objects(user_id=session.user_id, status_type="active"):
                reminder_name = item["reminder_name"]
                output.append({"id": item["date"], "name": f"{reminder_name} ‚û°Ô∏è"})
        return output


def get_period_inputs(period):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
    """
    if period == "one_time":
        return {
            "month": MonthInput,
            "day_of_month": DayOfMonthInput,
            "time": TimeInput,
        }

    elif period == "daily":
        return {"time": TimeInput}

    elif period == "weekly":
        return {"week_day": WeekDayInput, "time": TimeInput}

    elif period == "monthly":
        return {"day_of_month": DayOfMonthInput, "time": TimeInput}

    elif period == "yearly":
        return {
            "month": MonthInput,
            "day_of_month": DayOfMonthInput,
            "time": TimeInput,
        }

    return {}


def get_inputs(session: Session):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–≤–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∞.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏
        inputs = session.params.get("inputs", {}).get("0", {})

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if not inputs:
            return {
                "report": ReminderMenuInput,
            }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        report_type = inputs.get("report", None)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if report_type == "add_reminder":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chat_id
            chat_id = inputs.get("chat_id")
            tz = inputs.get("TZ")

            if not chat_id:
                # if Chat.objects(chat_id__in=chat_id).
                return {"chat_id": GetChatInput}
            # print(type(chat_id))
            # print(vars(Chat.objects(chat_id=int(chat_id)).first()))

            if Chat.objects(chat_id=int(chat_id)).first().TZ == None:
                if not tz:
                    return {"TZ": TimeZoneInput}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_name = inputs.get("reminder_name")
            if not reminder_name:
                return {"reminder_name": NameReminderInput}
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
            text = inputs.get("text")
            if not text:
                return {"text": TextInput}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–∏–æ–¥–∞
            period = inputs.get("period")
            if not period:
                return {"period": PeriodInput}

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            return get_period_inputs(period)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" –∏–ª–∏ "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        if report_type == "edit_reminder":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏
            reminder_date = inputs.get("reminder_date")
            if not reminder_date:
                return {"reminder_date": GetPostInput}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            action = inputs.get("action")
            if not action:
                return {"action": ReminderActionMenuInput}

            if action == "change_reminder":
                change = inputs.get("change")

                if not change:
                    return {"change": ChangeAReminderInput}

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if change == "change_period":
                    period = inputs.get("period")
                    if not period:
                        return {"period": PeriodInput}

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    return get_period_inputs(period)

                if change == "change_reminder":
                    return {"text": TextInput}

            if action in ["delete_reminders", "view_reminder"]:
                return {}
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        return {}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {sys.exc_info()[-1].tb_lineno}")


def generate(session: Session):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        inputs = session.params.get("inputs", {}).get("0", {})
        logger.info(inputs)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        report_type = inputs.get("report")

        time_zone = inputs.get("TZ")

        if time_zone:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chat_id
            chat_id = inputs.get("chat_id")
            params = {"TZ": time_zone}
            Chat.objects(chat_id=int(chat_id)).update(**params, upsert=True)

        if report_type == "add_reminder":
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            chat_id = inputs.get("chat_id")
            month = inputs.get("month", None)
            day_of_month = inputs.get("day_of_month", None)
            time = inputs.get("time", None)
            reminder_name = inputs.get("reminder_name", None)

            chat = Chat.objects(chat_id=int(chat_id)).first()

            print(vars(chat))
            post = {
                "text": inputs.get("text"),
                "user_id": session.user_id,
                "status_type": "active",
                "date": utcnow().to("local").isoformat(),
                "chat_id": chat_id,
                "month": month,
                "day_of_month": day_of_month,
                "time": time,
                "chat_name": chat.chat_title,
                "reminder_name": reminder_name,
                "TZ": chat.TZ,
            }

            report_data = format_reminder(post)

            logger.info(post)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Post
            Post.objects(date=post["date"]).update(**post, upsert=True)
            return [report_data]

        # –ï—Å–ª–∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ "edit_reminder", —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if report_type == "edit_reminder":

            reminder_date = inputs.get("reminder_date", None)
            print(reminder_date)
            change = inputs.get("change")
            action = inputs.get("action")

            if action == "delete_reminders":
                post = {
                    "status_type": "delete",
                    "date": utcnow().to("local").isoformat(),
                }
                logger.info(post)
                Post.objects(date=reminder_date).update(**post, upsert=True)

                post = Post.objects(date=reminder_date).first()

                report_data = format_reminder(post)

                return [report_data]
            if action == "view_reminder":
                post = Post.objects(date=reminder_date).first()
                chat = Chat.objects(chat_id=int(post.chat_id)).first()

                report_data = {
                    "üìã –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:": post["text"],
                    "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:": post.user_id,
                    "üìÖ –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º.:": post.status_type,
                    "üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:": post["date"][:10],
                    "üí¨ chat_name:": post.chat_name,
                    "üìÖ –ú–µ—Å—è—Ü –Ω–∞–ø–æ–º.:": post.month,
                    "üìÖ –î–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞–ø–æ–º.:": post.day_of_month,
                    "‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º.:": post.time,
                    "üìå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º.:": post["reminder_name"],
                    "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:": chat.TZ,
                }
                return [report_data]
            if change:
                post = Post.objects(date=reminder_date).first()
                chat = Chat.objects(chat_id=int(post.chat_id)).first()

                print(post["reminder_name"])
                if change == "change_period":
                    print("change_period")
                    month = inputs.get("month", None)
                    day_of_month = inputs.get("day_of_month", None)
                    time = inputs.get("time", None)

                    post_ = {
                        "date": utcnow().to("local").isoformat(),
                        "month": month,
                        "day_of_month": day_of_month,
                        "time": time,
                        "reminder_name": post["reminder_name"],
                    }

                    report_data = {
                        "üìã –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:": post["text"],
                        "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:": post.user_id,
                        "üìÖ –°—Ç–∞—Ç—É—Å:": post.status_type,
                        "üïí –î–∞—Ç–∞:": post_["date"][:16],
                        "üí¨ chat_name:": post.chat_name,
                        "üìÖ –ú–µ—Å—è—Ü:": month,
                        "üìÖ –î–µ–Ω—å –º–µ—Å—è—Ü–∞:": day_of_month,
                        "‚è∞ –í—Ä–µ–º—è:": time,
                        "üìå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:": post["reminder_name"],
                        "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:": chat.TZ,
                    }

                if change == "change_reminder":
                    text = inputs.get("text", None)

                    post_ = {
                        "text": text,
                        "reminder_name": post["reminder_name"],
                    }

                    report_data = {
                        "üìã –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:": text,
                        "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:": post.user_id,
                        "üìÖ –°—Ç–∞—Ç—É—Å:": post.status_type,
                        "üïí –î–∞—Ç–∞:": post["date"][:16],
                        "üí¨ chat_name:": post.chat_name,
                        "üìÖ –ú–µ—Å—è—Ü:": post.month,
                        "üìÖ –î–µ–Ω—å –º–µ—Å—è—Ü–∞:": post.day_of_month,
                        "‚è∞ –í—Ä–µ–º—è:": post.time,
                        "üìå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:": post["reminder_name"],
                        "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:": chat.TZ,
                    }
                logger.info(post_)
                logger.info(report_data)
                Post.objects(date=reminder_date).update(**post_, upsert=True)

                return [report_data]

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        # logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞: {e} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {sys.exc_info()[-1].tb_lineno}")
