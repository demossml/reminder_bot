from bd.model import (
    Session,
    Chat,
)

from .inputs import DocStatusInput


from arrow import utcnow, get

import logging

logger = logging.getLogger(__name__)

from pprint import pprint

name = "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚û°Ô∏è".upper()
desc = ""
mime = "text"


class ReportsSettingsInput:
    """
    –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = ({"id": "chat", "name": "–ß–∞—Ç—ã ‚û°Ô∏è".upper()},)
        return output


class ReportsSettingsChatInput:
    """
    –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    """

    name = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    desc = "–í—ã–±–µ—Ä–µ—Ç–µ".upper()
    type = "SELECT"

    def get_options(self, session: Session):
        output = [
            {"id": "add_chat", "name": "‚ûï –î–û–ë–ê–í–ò–¢–¨ –ß–ê–¢ ‚û°Ô∏è"},
            {"id": "delete_chat", "name": "‚àí –£–î–ê–õ–ò–¢–¨ –ß–ê–¢ ‚û°Ô∏è"},
            {"id": "view_chats", "name": "üëÄ –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –ß–ê–¢–´ ‚û°Ô∏è"},
        ]
        return output


class LinkInput:
    desc = "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ñ–æ—Ä–º–∞—Ç–µ @chat_name ‚úçÔ∏è".upper()
    type = "MESSAGE"


class GetLinInput:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    """

    desc = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç"
    type = "SELECT"

    def get_options(self, session: Session):
        output = []

        room = session["room"]
        # pprint(room)
        data_link = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(room) + 1):
            # –µ—Å–ª–∏ –≤ 'link' –µ—Å—Ç—å –≤ session.params["inputs"][str(i)]
            if "link" in session.params["inputs"][str(i)]:
                # –µ—Å–ª–∏ 'link' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º i –≤ —Å–ø–∏—Å–∫–µ data_link
                if session.params["inputs"][str(i)]["link"] not in data_link:

                    # –¥–æ–±–æ–≤–ª—è–µ—Ç 'link' –≤ —Å–ø–∏—Å–æ–∫ data_link
                    data_link.append(session.params["inputs"][str(i)]["link"])

        for item in Chat.objects(user_id=session.user_id, status_type="active"):
            if item["link"] not in data_link:
                output.append({"id": item["link"], "name": item["link"]})

        return output


def get_inputs(session: Session):
    inputs = session.params.get("inputs", {}).get("0", {})

    if not inputs:
        return {
            "report": ReportsSettingsChatInput,
        }

    report_type = inputs.get("report", None)

    if report_type == "add_chat":
        return {
            "link": LinkInput,
            "docStatus": DocStatusInput,
        }

    elif report_type == "delete_chat":

        return {
            "link": GetLinInput,
            "docStatus": DocStatusInput,
        }
    elif report_type == "view_chats":

        return {}


def generate(session: Session):
    inputs = session.params.get("inputs", {}).get("0", {})
    pprint(session.user_id)
    report_type = inputs.get("report", None)
    room = session["room"]
    if report_type == "add_chat":
        report_data = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(room) + 1):
            # –î–æ–±–∞–≤–ª—è–µ–º "shop_id" –≤ —Å–ø–∏—Å–æ–∫ shop_ids
            params = session.params["inputs"][str(i)]
            params.update(
                {
                    "user_id": session.user_id,
                    "status_type": "active",
                    "date": utcnow().to("local").isoformat(),
                }
            )

            Chat.objects(link=params["link"]).update(**params, upsert=True)

            report_data.append(
                {"–ê–î–†–ï–°:": params.get("link", "–ù–µ —É–∫–∞–∑–∞–Ω"), "–°–¢–ê–¢–£–°:": "–î–û–ë–ê–í–õ–ï–ù"}
            )
        return report_data
    if report_type == "delete_chat":
        report_data = []
        # —Å–æ–¥–æ–µ—Ç –∫–ª—é—á–∏ –≤ session.params["inputs"]
        for i in range(int(room) + 1):
            params = session.params["inputs"][str(i)]
            params.update(
                {
                    "user_id": session.user_id,
                    "status_type": "delete",
                    "date": utcnow().to("local").isoformat(),
                }
            )

            Chat.objects(user_id=session.user_id, link=params["link"]).update(
                **params, upsert=True
            )

            report_data.append(
                result={"–ê–î–†–ï–°": params.get("link", "–ù–µ —É–∫–∞–∑–∞–Ω"), "–°–¢–ê–¢–£–°": "–£–î–ê–õ–ï–ù"}
            )
        return report_data
    if report_type == "view_chats":
        report_data = []
        for item in Chat.objects(user_id=session.user_id):

            report_data.append(
                {
                    "–ê–î–†–ï–°": item["link"],
                    "–î–ê–¢–ê": item["date"],
                    "–°–¢–ê–¢–£–°": item["status_type"],
                }
            )

        return report_data
