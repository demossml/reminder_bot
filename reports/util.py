from bd.model import Session
from arrow import utcnow, get
from typing import List, Tuple
from pprint import pprint


# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ


def period_to_date(period: str) -> utcnow:
    """
    :param period: day, week,  fortnight, month, two months,
    :return: utcnow - period
    """
    if period == "day":
        return utcnow().to("local").replace(hour=3, minute=00).isoformat()
    if period == "week":
        return (
            utcnow().to("local").shift(days=-7).replace(hour=3, minute=00).isoformat()
        )
    if period == "fortnight":
        return (
            utcnow().to("local").shift(days=-14).replace(hour=3, minute=00).isoformat()
        )
    if period == "month":
        return (
            utcnow().to("local").shift(months=-1).replace(hour=3, minute=00).isoformat()
        )
    if period == "two months":
        return (
            utcnow().to("local").shift(months=-2).replace(hour=3, minute=00).isoformat()
        )
    if period == "6 months":
        return (
            utcnow().to("local").shift(months=-6).replace(hour=3, minute=00).isoformat()
        )
    if period == "12 months":
        return (
            utcnow()
            .to("local")
            .shift(months=-12)
            .replace(hour=3, minute=00)
            .isoformat()
        )
    if period == "24 months":
        return (
            utcnow()
            .to("local")
            .shift(months=-24)
            .replace(hour=3, minute=00)
            .isoformat()
        )
    if period == "48 months":
        return (
            utcnow()
            .to("local")
            .shift(months=-48)
            .replace(hour=3, minute=00)
            .isoformat()
        )
    raise Exception("Period is not supported")


def period_to_date_2(period: str) -> utcnow:
    """
    :param period: day, week,  fortnight, month, two months,
    :return: utcnow + period
    """
    if period == "day":
        return utcnow().replace(hour=3, minute=00).isoformat()
    if period == "week":
        return utcnow().shift(days=7).replace(hour=3, minute=00).isoformat()
    if period == "fortnight":
        return utcnow().shift(days=14).replace(hour=3, minute=00).isoformat()
    if period == "month":
        return utcnow().shift(months=1).replace(hour=3, minute=00).isoformat()
    if period == "two months":
        return utcnow().shift(months=2).replace(hour=3, minute=00).isoformat()
    if period == "6 months":
        return utcnow().shift(months=6).replace(hour=3, minute=00).isoformat()
    if period == "12 months":
        return utcnow().shift(months=12).replace(hour=3, minute=00).isoformat()
    if period == "24 months":
        return utcnow().shift(months=24).replace(hour=3, minute=00).isoformat()
    if period == "48 months":
        return utcnow().shift(months=48).replace(hour=3, minute=00).isoformat()
    raise Exception("Period is not supported")


def get_intervals(
    min_date: str, max_date: str, unit: str, measure: float
) -> List[Tuple[str, str]]:
    """
    :param min_date: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–∏—Ä–∏–æ–¥–∞
    :param max_date: –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∏—Ä–∏–æ–¥–∞
    :param unit: days, weeks,  fortnights, months
    :param measure: int —à–∞–≥
    :return: List[Tuple[min_date, max_date]]
    """
    output = []
    while min_date < max_date:
        # –∑–∞–ø–∏—Å—ã–≤–µ—Ç –≤ –ø–µ—Ä–º–µ–Ω–Ω—É—é temp –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–ª—é—Å (unit: measure)
        temp = get(min_date).shift(**{unit: measure}).isoformat()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ output –ø–∞—Ä—É –¥–∞—Ç min_date –∏  –º–µ–Ω—å—à—É—é –¥–∞—Ç—É min_date max_date –∏–ª–∏ temp
        output.append((min_date, min(temp, max_date)))
        # –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ min_date –Ω–∞ temp
        min_date = temp
    return output


def get_period(session: Session):
    """
    :param session:
    :return: {'since': str, 'until': str}
    """
    period_in = ["day", "week", "fortnight", "month"]
    if session.params["inputs"]["0"]["period"] not in period_in:
        return {
            "since": get(session.params["inputs"]["0"]["openDate"])
            .replace(day=1)
            .isoformat(),
            "until": get(session.params["inputs"]["0"]["openDate"])
            .ceil("month")
            .isoformat(),
        }
    if session.params["inputs"]["0"]["period"] == "day":
        return {
            "since": period_to_date(session.params["inputs"]["0"]["period"]),
            "until": utcnow().isoformat(),
        }

    else:
        return {
            "since": get(session.params["inputs"]["0"]["openDate"])
            .replace(hour=3, minute=00)
            .isoformat(),
            "until": get(session.params["inputs"]["0"]["closeDate"])
            .replace(hour=23, minute=00)
            .isoformat(),
        }


def get_period_day(session: Session):
    """
    :param session:
    :return: {'since': str, 'until': str}
    """
    if session.params["inputs"]["0"]["period"] == "day":
        return {
            "since": period_to_date(session.params["inputs"]["0"]["period"]),
            "until": get(period_to_date(session.params["inputs"]["0"]["period"]))
            .replace(hour=23, minute=00)
            .isoformat(),
        }

    else:
        return {
            "since": get(session.params["inputs"]["0"]["openDate"])
            .replace(hour=0, minute=1)
            .isoformat(),
            "until": get(session.params["inputs"]["0"]["openDate"])
            .replace(hour=23, minute=59)
            .isoformat(),
        }


def format_reminder(input_dict: dict) -> dict:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, –∑–∞–º–µ–Ω—è—è –∫–ª—é—á–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        input_dict (dict): –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –û–∂–∏–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏:
            - 'text' (str): –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
            - 'user_id' (str): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            - 'status_type' (str): –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "active").
            - 'date' (str): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2024-07-27T14:00:00+00:00").
            - 'link' (str): –°—Å—ã–ª–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.
            - 'month' (str): –ú–µ—Å—è—Ü –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò—é–ª—å").
            - 'day_of_month' (str): –î–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "27").
            - 'time' (str): –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "14:00").
            - 'reminder_name' (str): –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∑—è—Ç—ã –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
        –ö–ª—é—á–∏ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–∫–∞–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è `data`:
            - "üìã –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:" –¥–ª—è 'text'
            - "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:" –¥–ª—è 'user_id'
            - "üìÖ –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º." –¥–ª—è 'status_type'
            - "üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:" –¥–ª—è 'date'
            - "üìÖ –ú–µ—Å—è—Ü –Ω–∞–ø–æ–º.:" –¥–ª—è 'month'
            - "üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞–ø–æ–º.:" –¥–ª—è 'month'
            - "üìÖ –î–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞–ø–æ–º.:" –¥–ª—è 'day_of_month'
            - "‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º.:" –¥–ª—è 'time'
            - "üìå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º.:" –¥–ª—è 'reminder_name'
    """
    data = {
        "text": "üìã –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        "user_id": "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        "status_type": "üìÖ –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º.",
        "date": "üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:",
        "month": "üìÖ –ú–µ—Å—è—Ü –Ω–∞–ø–æ–º.:",
        "week_day": "üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
        "day_of_month": "üìÖ –î–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞–ø–æ–º.:",
        "time": "‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º.:",
        "chat_name": "üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:",
        "reminder_name": "üìå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º.:",
        "TZ": "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
    }

    formatted_dict = {}
    for k, v in input_dict.items():
        if k in data:
            if k == "date":
                formatted_dict[data[k]] = v[:16]
            else:
                formatted_dict[data[k]] = v

    return formatted_dict
