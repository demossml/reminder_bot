import telebot
import logging
from telebot import types
from telebot.apihelper import ApiTelegramException
from datetime import datetime
import schedule
import time
from bd.model import Chat, Post
import pytz
import threading
import arrow

time_zone_ = {
    "+00": 0,
    "+01": -1,
    "+02": -2,
    "+03": -3,
    "+04": -4,
    "+05": -5,
    "+06": -6,
    "+07": -7,
    "+08": -8,
    "+09": -9,
    "+10": -10,
    "+11": -11,
    "+12": -12,
    "-01": 1,
    "-02": 2,
    "-03": 3,
    "-04": 4,
    "-05": 5,
    "-06": 6,
    "-07": 7,
    "-08": 8,
    "-09": 9,
    "-10": 10,
    "-11": 11,
    "-12": 12,
}

welcome_message = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –≤–∞—à –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º! üéâ

–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –≤–∞–º –∏ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ–±—ã—Ç–∏—è. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:

üìÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.
‚úèÔ∏è –ò–∑–º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**.
üóëÔ∏è –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**.
üìã –í—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É. –≠—Ç–æ –ª–µ–≥–∫–æ —Å–¥–µ–ª–∞—Ç—å:

1. üìå –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞.
2. ‚ûï –í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞".
3. üîç –í–≤–µ–¥–∏—Ç–µ –º–æ–π –Ω–∏–∫: @ReminderPost_bot .
4. üë§ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–µ–Ω—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å".

–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, —è —Å–º–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç! üí¨

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @ds7278, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—è! –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à—É —Ä–∞–±–æ—Ç—É –µ—â–µ –±–æ–ª–µ–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π. üöÄ
"""


logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É MSK
msk = pytz.timezone("Europe/Moscow")

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7482295427:AAHuiiKgdQtqnWLKi8sAWn7AwVcbC2xMafU"
bot = telebot.TeleBot(TOKEN)


btUrlChannel = types.InlineKeyboardButton(
    text="Reminder Manager üìù", url="https://t.me/ReminderManager_bot"
)
channelMenu = types.InlineKeyboardMarkup(row_width=1)
channelMenu.add(btUrlChannel)


def get_time_zone_value(key):
    value = time_zone_.get(key)
    if value is None:
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
    sign = "+" if value < 0 else "-"
    return sign, abs(value)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
def validate_time_format(time_str):
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def job(chat_id, text):
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {text}")
        bot.send_message(int(chat_id), text)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def schedule_messages():
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    posts_data = Post.objects(status_type="active")
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏, –∫—Ä–æ–º–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    get_jobs = schedule.get_jobs()
    if len(get_jobs) > 0:
        for job_ in get_jobs:
            if "update_schedule" not in job_.tags:
                logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {job_}")
                schedule.cancel_job(job_)

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for item in posts_data:
        day_of_month = item["day_of_month"]
        week_day = item["week_day"]
        month = item["month"]
        text = item["text"]
        time_str = item["time"]
        chat_id = item["chat_id"]
        reminder_name = item["reminder_name"]

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —á–∞—Ç–∞
        chat = Chat.objects(chat_id=int(chat_id)).first()

        if chat:
            time_zone = chat["TZ"]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
            now = arrow.now().shift(hours=int(time_zone))  # –°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            logger.info(f"now: {arrow.now()}")
            year = now.year

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            if month and day_of_month:
                datetime_str = (
                    f"{year}-{int(month):02d}-{int(day_of_month):02d} {time_str}"
                )
            elif day_of_month:
                datetime_str = (
                    f"{year}-{now.month:02d}-{int(day_of_month):02d} {time_str}"
                )
            elif week_day:
                next_weekday = now.shift(days=(int(week_day) - now.weekday()) % 7)
                datetime_str = f"{next_weekday.format('YYYY-MM-DD')} {time_str}"

            else:
                datetime_str = f"{year}-{now.month:02d}-{now.day:02d} {time_str}"

            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ arrow.get(), —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Arrow
                dt = arrow.get(datetime_str, "YYYY-MM-DD HH:mm").shift(
                    hours=int(time_zone_[time_zone])  # –°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                )
                day_of_month_ = dt.format("DD")

                logger.info(f"dt: {dt}")
                # –£–∂–µ —Å–¥–µ–ª–∞–Ω–æ —Å–º–µ—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É no need to call .to('UTC') here
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                continue

            logging.info(
                f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: time_zone={time_zone}, reminder_name={reminder_name}, —á–∞—Ç_id={chat_id}, —Ç–µ–∫—Å—Ç={text}, –¥–µ–Ω—å={day_of_month}, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏={week_day}, –º–µ—Å—è—Ü={month}, –≤—Ä–µ–º—è={time_str}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if not validate_time_format(time_str):
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}")
                continue

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if month and day_of_month:

                # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞
                schedule_time = dt.format("HH:mm")

                def yearly_job():
                    print("yearly_job")
                    today = now
                    if today.day == int(day_of_month_) and today.month == int(month):
                        job(chat_id, text)

                schedule.every().day.at(schedule_time).do(yearly_job).tag(reminder_name)
            elif day_of_month:
                # –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
                schedule_time = dt.format("HH:mm")

                def monthly_job():

                    today = now

                    if today.day == int(day_of_month_):
                        job(chat_id, text)

                schedule.every().day.at(schedule_time).do(monthly_job).tag(
                    reminder_name
                )
            elif week_day:
                # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
                schedule_time = dt.format("HH:mm")

                def weekly_job():
                    today_weekday = dt.format("dddd")
                    if today_weekday == int(week_day):
                        job(chat_id, text)

                schedule.every().day.at(schedule_time).do(weekly_job).tag(reminder_name)

            else:
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –∏–ª–∏ –º–µ—Å—è—Ü
                schedule.every().day.at(dt.format("HH:mm")).do(job, chat_id, text).tag(
                    reminder_name
                )
        # # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        # time_until_next = (time_obj - current_time).total_seconds() / 60

        # # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
        # if time_until_next < 0:
        #     logging.warning(
        #         f"–í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ {abs(time_until_next):.2f} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        #     )
        # else:
        #     logging.info(
        #         f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {time_until_next:.2f} –º–∏–Ω—É—Ç"
        #     )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def update_schedule():
    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    schedule_messages()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
def log_scheduled_jobs():
    jobs = schedule.get_jobs()
    for job in jobs:
        logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {job}")


@bot.message_handler(commands=["start"])
def start(message: types.Message):
    bot.send_message(message.from_user.id, welcome_message, reply_markup=channelMenu)


@bot.message_handler(content_types=["new_chat_members"])
def on_user_joined(message: types.Message):
    logger.info("New chat member joined: %s", message.new_chat_members)
    params = {
        "chat_id": message.chat.id,
        "chat_title": message.chat.title,
        "user_id": message.from_user.id,
        "status_type": "active",
        "TZ": None,
    }
    try:
        Chat.objects(chat_id=message.chat.id).update(**params, upsert=True)
        logger.info("User %s added to chat %s", message.from_user.id, message.chat.id)
        if not message.reply_to_message:
            bot.reply_to(
                message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É!", reply_markup=channelMenu
            )

    except Exception as e:
        logger.error("Error updating chat database: %s", str(e))


@bot.message_handler(content_types=["left_chat_member"])
def farewell_members(message: types.Message):
    logger.info("Chat member left: %s", message.left_chat_member)
    params = {
        "chat_id": message.chat.id,
        "chat_title": message.chat.title,
        "user_id": message.from_user.id,
        "status_type": "left_chat_member",
    }
    try:
        Chat.objects(chat_id=message.chat.id).update(**params, upsert=True)
        logger.info(
            "User %s removed from chat %s", message.from_user.id, message.chat.id
        )
    except Exception as e:
        logger.error("Error updating chat database: %s", str(e))


def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    update_schedule()  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 70 —Å–µ–∫—É–Ω–¥
    schedule.every(20).seconds.do(update_schedule).tag("update_schedule")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.infinity_polling()
